function [basis, i] = getOrderedGSBasis3(CG, A, iterations, tol, w)
    % Setup
    m = CG.cells.num;
    Orders = getOrders(CG,A);
    A = A - diag(sum(A, 2));
    R = controlVolumeRestriction(CG.partition);
    G = CG.parent;
    
    lens = cellfun(@numel, CG.cells.interaction);
    blocks = rldecode((1:CG.cells.num)', lens);
    interaction = vertcat(CG.cells.interaction{:});
    interactionMap = sparse(interaction, blocks, ones(size(interaction)), CG.parent.cells.num, CG.cells.num);

    I = controlVolumeRestriction(CG.partition)';
    
    D = diag(A);
    n = numel(D);
    D_inv = spdiags(1./D, 0, n, n);
    
    M = D_inv*A;
    
    Orders
    
    PerM = zeros(n);
    PerA = zeros(n);
    for j = 1:m
        for i = 1:n
            PerM(i,Orders(i,j),j) = 1; 
        end
    end
    
    for k = 1:m
        temp = zeros(1,G.cells.num); 
        temp(CG.cells.centers(k)) = 1; 
        A(CG.cells.centers(k),:) =temp; 
        
        RHS(CG.cells.centers(k),k)=1;
    end
    
    
    F = - (triu(A) - spdiags(D, 0, n, n));
  
    FORWARD = A+F;
    
    maxIT1 = iterations; 
    maxIT2 = 1; 
    tolOne = tol; 
    tolTwo = -1; 
    
    totalIter = 0; 
    
    FORWARD = full(FORWARD); 
    F = full(F); 
    I = full(I);
    A = full(A); 
   
    j = 0; 
    while j < maxIT1
        j=j+1;
        i = 0;
        prevOne = I; 
        while i < maxIT2
             i = i + 1;
            prevTwo = I; 
            
            for k = 1:1
                A2 = PerM(:,:,k)*A
                F2 = PerM(:,:,k)*F
            end
            
            % forward step
            %update = (FORWARD)\(F*I+RHS); 
            update = interactionMap; 
            update = update.*interactionMap;
            update = (1-w)*I + w*update;
            
            
            
            I = update;
            
            diffTwo = max(max(abs(prevTwo - I)));

            if (diffTwo < tolTwo) 
                dispif(false, 'single run converged after %d iterations\n', i);
                break;
            end
            if (i==maxIT2)
                dispif(false, 'single run did not converge after  %d iterations\n', i);
            end
            
        end
        
        totalIter=totalIter+i; 

        
       I = bsxfun(@rdivide, I, sum(I, 2));
        
        diffOne = full(max(max(abs(prevOne - I))));
        if (diffOne < tolOne)
            dispif(true, '\nOrderedGS converged after %d sequences\n', j);
            dispif(true, 'total number of iterations: %d\n', totalIter);
            break;
        end
        
        if (j==maxIT1)
            dispif(true, '\nOrderedGS did not converge after %d sequences\n', j);
            dispif(true, 'total number of iterations: %d\n', totalIter);
        end
        
        
    end
    
    i = j; 
    I = I.*interactionMap;
    I = bsxfun(@rdivide, I, sum(I, 2));
    
   
    basis = struct('R', R, 'B', I, 'type', 'rsb');
end



